11. Container With Most Water

Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). 
n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, 
which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. 
In this case, the max area of water (blue section) the container can contain is 49.

题目:
找出两个高度之间的最大盛水面积

思路：
1.算面积
2.设定答案为0，然后不断更新答案
3.判断哪一边移动时，选择高的一边不断，矮的一边向里面移
4.两边相等的话，选右边向前移

class Solution:
    def maxArea(self, height: List[int]) -> int:
        left = 0         左边从0的位置开始
        right = len(height)-1    右边从最后面开始
        res= 0      设定输出答案=0
        
        while left < right:       当左边和右边不重逢或者交叉时
            water= min(height[left], height[right])*(right-left)    
						面积= 矮的一边 * 两边的距离
            
            if water > res:    如果面积 > 目前设定的答案
                res = water     更新答案
                
            if height[left] < height[right]:   如果左边  矮于  右边，保留高的一边
                left += 1   左边向后移动
            else:      不然
                right -=1   右边向前移动
            
        return res   输出答案
