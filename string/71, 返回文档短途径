71. Simplify Path

Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, 
convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, 
a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. 
For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

The path starts with a single slash '/'.
Any two directories are separated by a single slash '/'.
The path does not end with a trailing '/'.
The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
Return the simplified canonical path.

 

Example 1:

Input: path = "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
Example 2:

Input: path = "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
Example 3:

Input: path = "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.
Example 4:

Input: path = "/a/./b/../../c/"
Output: "/c"

题目:
1.给出文件路径，简化它
2. "   .   "  一个点的时候，是留在当前文件夹
3."   . .   "   两个点的时候，是把当前文件夹向上移
4.最后文件夹不能有 “  /  ”

思路：
1. 根据 ‘  /  ’来将path 进行spilt
2. 用 res 保存简化后需要的文件名
3. 对每个元素进行分类讨论
4. 一个点，或者空字符   则跳过
5. 如果是.. 说明需要返回上一级，即弹出一个文件名
6. 但是这里有一个细节需要注意，只有res非空的时候才能弹出，否则对于测试用例 '/../'不能通过
7.如果是普通的文件名，则加入res


class Solution:
    def simplifyPath(self, path: str) -> str:
        s = path.split('/')   根据 / 分开单词遍历，去除它 /
        res, i = [], 0       定义答案， 遍历的个数
        while i < len(s):    遍历
            if s[i] == '..':    遇到两个点
                if res:       如果之前有文档，
                    res.pop()      可以去除
            elif s[i] != '.' and s[i] != '':     如果只有一个点或者空格
                res.append(s[i])       加入答案
            i += 1   遍历下一个
        return '/' + '/'.join(res)     输出的答案加上 / 号



