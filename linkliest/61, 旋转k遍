61. Rotate List
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
题目:
1.给出序号为k
2.按照k的位置，旋转linklist
3.把最后的位置调到前面，直到调到k的次数

思路：
1.假如k的次数> linklist的个数，
2.如果k太长，就浪费遍历的时间要整除找到余数
3.首尾相连
4.查linklist有多长


class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if head is None or head.next is None:     如果为空
            return head    返回
        
        n = 0     计数，找出linklist有多长
        p = head    从head开始数
        while p:     一个个查下去
            n += 1      每个点一个就 +1
            p = p.next      接着点下一个
            
        k = k % n       旋转k的次数整除linklist的长度n，得余数k
        if k == 0:     余数==0
            return head    返回
        
        p1, p2 = head, head    从头开始，两个指针
        for i in range(k):     遍历
            p2 = p2.next   第2个指针指向下一个node
                
        while p2 and p2.next:    当有下一个node的时候
            p1= p1.next     遍历到下一个
            p2 = p2.next      第2个指针到第3个位置
            
        output = p1.next     输出= 第一个指针的后面一个node开始
        p1.next = None     第一个指针走完
        p2.next = head      第2个指针 跳到原先的head开始
        
        return output      输出结果
